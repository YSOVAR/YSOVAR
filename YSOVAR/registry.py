# Copyright (C) 2013 H.M.Guenther & K.Poppenhaeger. See Licence.rst for details.
'''
Provide a registry of functions to analyse lightcurves.

:class:`YSOVAR.atlas.YSOVAR_atlas` objects can autogenerate a certain number of
columns in the data table. This module provides the mechanism for defining the
functions that are required for this autogeneration to work.

For each function a certain number of metadata information is required, so
that :class:`YSOVAR.atlas.YSOVAR_atlas` can find them and call them with the 
right parameters.

Example
-------

This is probably best explained by an example::

    import numpy as np
    from YSOVAR import registry
    from YSOVAR import atlas

    registry.register(np.mean, n_bands=1, error = False, 
                      time = False, name = "mean", default_colnames = ["mean"],
                      description = "mean of lightcurve")

The modules uses sensible defaults, e.g. the name of the function is used as
default for the autogenerated column name, so, the following would also work::

    registry.register(np.mean, n_bands=1, error = False, time = False)
    
After this function is registered, you can now automatically generate
columns for the mean values::
    
    <read your datafile>
    my_cloud  = atlas.YSOVAR_atlas(lclist = your_data_here)
    temp = my_cloud['mean_36']
    temp = my_cloud['mean_45']

.. note::
    In practice, you do not need to register ``np.mean`` because a selection of
    common functions is automatically registered, when the modules is imported.
    The following command will list the available functions::

        registry.list_lcfuncs()

Call signatures for functions
-----------------------------

The string in the colname is split in the name that will be used to look up the
function in the function registry (``'mean'``) and the name of the band (``'36'``).
For this reason, registered function names cannot contain underscores.

Registered functions have to follow a convention on which inputs they accept::

    def func([time],band1, band2, ..., [band1_err, band2_err ...])

All inputs will be numby arrays. ``time  = True / False`` controls if the
inital time array is present, ``error = True / False`` is the uncertainties
for  each band are passed in. ``n_bands`` says how many bands are expected
on input.
'''
from astropy.utils.compat.odict import OrderedDict

lc_funcs = OrderedDict()

class LightcurveFunc(object):
    '''Wrap function for the lightcurve analysis function registry

    This wrapper is to be used for fucntions that operate on individual
    lightcurves.

    Functions in the registry of analysis function for lightcurves need
    some metadata for make sure that they can be called correctly, when
    :class:`atlas.YSOVAR_atlas` autogenerated columns in the table.

    This class warps a function and provied some metadata.
    This metadata includes:

        - The number of bands the function requires as input.
        - Does the function require the uncertainty of the mags?
        - Does the function require the time of the observations?
        - What is the name of the function, so that it can be found?
        - Some short description of the function.
        - Default names for the columns that are autogenerated.

    Use the following command to read to full docstring of the function
    that is wrapped in this object::

        help(my_object.func)
    '''
    kwargs = {}    

    def __init__(self, func, n_bands, error, time, name = '',
                 default_colnames = [], other_cols = dict(), description = '', kwargs = {}):
        '''Wrap function for the lightcurve analysis function registry

        Parameters
        ----------
        func : function or callable object
            This function will be called.
        n_bands : int
            Number of spectral bands required by this function.
        error : bool
            If ``True`` the uncertainties in each lightcurve band will be passed
            to the function.
        time : bool
            If ``True`` the observations times will be passed as first argument.
        name : string
            Set the name used to identify the function in the registry.
            Default is the name of the function.
        description : string
            One line description of the function.
            Default is the first line of the docstring of the function.
        default_colnames : list of strings
            Prefix used for naming auto-generated data columns in a :class:`YSOVAR_atlas`.
            All generated columns are of type ``np.float``; this is just a
            convenience, since most column are float columns. It is equally
            possible to define each column with its datatype explicitly in
            ``other_col``.
            The length of the list should equal the number of values returned by the
            function. If neither this keyword nor ``other_col``is set,
            it defaults to the name of the function. However, if the function
            returns more than on output value then this keyword is required.
        other_cols : Ordered dictionary
            This dictionary fullfills the same role as ``default_colname``, but
            if allows to specify ``{colname: dtype}`` pairs.
            If both ``default_colname`` and ``other_col`` are present, then
            the first values are assigned to the columns named in
            ``default_colname``.
        kwargs : dictionary
            This supplied keyword arguments that will be passed to ``func`` each
            time it is called, unless the keyword of the same name is passed
            when calling. Essentially, this provides a mechnism to
            easily freeze a keyword argument.
        '''
        self.func = func
        self.n_bands = n_bands
        self.error = error
        self.time = time
        if name == '':
            self.name = func.__name__
        else:
            self.name = name

        if '_' in name:
            raise ValueError('{0} contains an "_". This does not work for autogeneration of columns. Use name = name to speficy an alternative name.'.format(name))
    
        if default_colnames == [] and other_cols == OrderedDict():
            self.default_colnames = OrderedDict([[func.__name__, float]])
        else:
            self.default_colnames = OrderedDict(
                zip(default_colnames, [float]*len(default_colnames)))
            self.default_colnames.update(other_cols)        
            
        if description == '':
            # Find first non-empty line in description
            descr = func.__doc__.split('\n')
            # Just to safeguard for empty docstrings
            try:
                self.description = descr.pop(0).strip()
                while self.description == '':
                    self.description = descr.pop(0).strip()
            except IndexError:
                pass
        else:
            self.description = description

        self.kwargs = kwargs
 
    def __call__(self, *args, **kwargs):
        pass_args = self.kwargs.copy()
        pass_args.update(kwargs)
        return self.func(*args, **pass_args)

    def __str__(self):
        return '{0:10s} - {1}'.format(self.name, self.description)


def register(func, n_bands =1, error = False, time = False, force = False, **kwargs):
    '''Register a new function for lightcurve analysis

    Parameters
    ----------
    func : function or callable object
        This function will be called.
    n_bands : int
        Number of spectral bands required by this function.
    error : bool
        If ``True`` the uncertainties in each lightcurve band will be passed
        to the function.
    time : bool
        If ``True`` the observations times will be passed as first argument.
    force : bool
        If ``True`` a function of same name that was previously registered
        will be over written.

    All remaining keyword will be passed to :func:`LightcurveFunc.__init__`.
    See that function for description and default values of other
    accepted keywords.
    '''
        
    if 'name' in kwargs:
        name = kwargs.pop('name')
    else:
        name = func.__name__
    
    if (name in lc_funcs) and not force:
         raise Exception("Function with name {0} already defined. Set force = True to override.".format(name))
    else:
        lcfunc = LightcurveFunc(func, n_bands, error, time, name = name, **kwargs)
        lc_funcs[name] = lcfunc

def list_lcfuncs():
    '''List all function currently registered with a shirt summary'''
    print 'These functions can be used to autogenerate YSOVAR table columns:'
    print '-----------------------------------------------------------------'
    for func in lc_funcs:
        print str(lc_funcs[func])
